// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             v4.25.2
// source: api/proto/client-stream/client-stream.proto

package client_stream

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	TemperatureService_GetAvgTemp_FullMethodName = "/TemperatureService/getAvgTemp"
)

// TemperatureServiceClient is the client API for TemperatureService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type TemperatureServiceClient interface {
	GetAvgTemp(ctx context.Context, opts ...grpc.CallOption) (TemperatureService_GetAvgTempClient, error)
}

type temperatureServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewTemperatureServiceClient(cc grpc.ClientConnInterface) TemperatureServiceClient {
	return &temperatureServiceClient{cc}
}

func (c *temperatureServiceClient) GetAvgTemp(ctx context.Context, opts ...grpc.CallOption) (TemperatureService_GetAvgTempClient, error) {
	stream, err := c.cc.NewStream(ctx, &TemperatureService_ServiceDesc.Streams[0], TemperatureService_GetAvgTemp_FullMethodName, opts...)
	if err != nil {
		return nil, err
	}
	x := &temperatureServiceGetAvgTempClient{stream}
	return x, nil
}

type TemperatureService_GetAvgTempClient interface {
	Send(*Temperature) error
	CloseAndRecv() (*Temperature, error)
	grpc.ClientStream
}

type temperatureServiceGetAvgTempClient struct {
	grpc.ClientStream
}

func (x *temperatureServiceGetAvgTempClient) Send(m *Temperature) error {
	return x.ClientStream.SendMsg(m)
}

func (x *temperatureServiceGetAvgTempClient) CloseAndRecv() (*Temperature, error) {
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	m := new(Temperature)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// TemperatureServiceServer is the server API for TemperatureService service.
// All implementations must embed UnimplementedTemperatureServiceServer
// for forward compatibility
type TemperatureServiceServer interface {
	GetAvgTemp(TemperatureService_GetAvgTempServer) error
	mustEmbedUnimplementedTemperatureServiceServer()
}

// UnimplementedTemperatureServiceServer must be embedded to have forward compatible implementations.
type UnimplementedTemperatureServiceServer struct {
}

func (UnimplementedTemperatureServiceServer) GetAvgTemp(TemperatureService_GetAvgTempServer) error {
	return status.Errorf(codes.Unimplemented, "method GetAvgTemp not implemented")
}
func (UnimplementedTemperatureServiceServer) mustEmbedUnimplementedTemperatureServiceServer() {}

// UnsafeTemperatureServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to TemperatureServiceServer will
// result in compilation errors.
type UnsafeTemperatureServiceServer interface {
	mustEmbedUnimplementedTemperatureServiceServer()
}

func RegisterTemperatureServiceServer(s grpc.ServiceRegistrar, srv TemperatureServiceServer) {
	s.RegisterService(&TemperatureService_ServiceDesc, srv)
}

func _TemperatureService_GetAvgTemp_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(TemperatureServiceServer).GetAvgTemp(&temperatureServiceGetAvgTempServer{stream})
}

type TemperatureService_GetAvgTempServer interface {
	SendAndClose(*Temperature) error
	Recv() (*Temperature, error)
	grpc.ServerStream
}

type temperatureServiceGetAvgTempServer struct {
	grpc.ServerStream
}

func (x *temperatureServiceGetAvgTempServer) SendAndClose(m *Temperature) error {
	return x.ServerStream.SendMsg(m)
}

func (x *temperatureServiceGetAvgTempServer) Recv() (*Temperature, error) {
	m := new(Temperature)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// TemperatureService_ServiceDesc is the grpc.ServiceDesc for TemperatureService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var TemperatureService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "TemperatureService",
	HandlerType: (*TemperatureServiceServer)(nil),
	Methods:     []grpc.MethodDesc{},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "getAvgTemp",
			Handler:       _TemperatureService_GetAvgTemp_Handler,
			ClientStreams: true,
		},
	},
	Metadata: "api/proto/client-stream/client-stream.proto",
}
